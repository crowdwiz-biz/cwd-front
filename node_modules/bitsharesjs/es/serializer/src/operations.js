import types from "./types";
import SerializerImpl from "./serializer";

var uint8 = types.uint8,
    uint16 = types.uint16,
    uint32 = types.uint32,
    int64 = types.int64,
    uint64 = types.uint64,
    string = types.string,
    bytes = types.bytes,
    bool = types.bool,
    array = types.array,
    protocol_id_type = types.protocol_id_type,
    object_id_type = types.object_id_type,
    vote_id = types.vote_id,
    future_extensions = types.future_extensions,
    static_variant = types.static_variant,
    map = types.map,
    set = types.set,
    public_key = types.public_key,
    address = types.address,
    time_point_sec = types.time_point_sec,
    optional = types.optional,
    extension = types.extension;

future_extensions = types.void;

/*
When updating generated code
Replace:  operation = static_variant [
with:     operation.st_operations = [

Delete:
public_key = new Serializer(
    "public_key"
    key_data: bytes 33
)

*/
// Place-holder, their are dependencies on "operation" .. The final list of
// operations is not avialble until the very end of the generated code.
// See: operation.st_operations = ...
var operation = static_variant();
// module.exports["operation"] = operation;

export {operation};
// For module.exports
var Serializer = function Serializer(
    operation_name,
    serilization_types_object
) {
    return new SerializerImpl(operation_name, serilization_types_object);
    // return module.exports[operation_name] = s;
};

// Custom-types follow Generated code:
// replase Extensions which not future extension
// ##  Generated code follows
// # programs/js_operation_serializer > npm i -g decaffeinate
// ## -------------------------------

export var transfer_operation_fee_parameters = new Serializer( 
    "transfer_operation_fee_parameters", {
    fee: uint64,
    price_per_kbyte: uint32
}
);

export var limit_order_create_operation_fee_parameters = new Serializer( 
    "limit_order_create_operation_fee_parameters",
    {fee: uint64}
);

export var limit_order_cancel_operation_fee_parameters = new Serializer( 
    "limit_order_cancel_operation_fee_parameters",
    {fee: uint64}
);

export var call_order_update_operation_fee_parameters = new Serializer( 
    "call_order_update_operation_fee_parameters",
    {fee: uint64}
);

export var fill_order_operation_fee_parameters = new Serializer( 
    "fill_order_operation_fee_parameters"
);

export var account_create_operation_fee_parameters = new Serializer( 
    "account_create_operation_fee_parameters", {
    basic_fee: uint64,
    premium_fee: uint64,
    price_per_kbyte: uint32
}
);

export var account_update_operation_fee_parameters = new Serializer( 
    "account_update_operation_fee_parameters", {
    fee: int64,
    price_per_kbyte: uint32
}
);

export var account_whitelist_operation_fee_parameters = new Serializer( 
    "account_whitelist_operation_fee_parameters",
    {fee: int64}
);

export var account_upgrade_operation_fee_parameters = new Serializer( 
    "account_upgrade_operation_fee_parameters", {
    membership_annual_fee: uint64,
    membership_lifetime_fee: uint64
}
);

export var account_transfer_operation_fee_parameters = new Serializer( 
    "account_transfer_operation_fee_parameters",
    {fee: uint64}
);

export var asset_create_operation_fee_parameters = new Serializer( 
    "asset_create_operation_fee_parameters", {
    symbol3: uint64,
    symbol4: uint64,
    long_symbol: uint64,
    price_per_kbyte: uint32
}
);

export var asset_update_operation_fee_parameters = new Serializer( 
    "asset_update_operation_fee_parameters", {
    fee: uint64,
    price_per_kbyte: uint32
}
);

export var asset_update_bitasset_operation_fee_parameters = new Serializer( 
    "asset_update_bitasset_operation_fee_parameters",
    {fee: uint64}
);

export var asset_update_feed_producers_operation_fee_parameters = new Serializer( 
    "asset_update_feed_producers_operation_fee_parameters",
    {fee: uint64}
);

export var asset_issue_operation_fee_parameters = new Serializer( 
    "asset_issue_operation_fee_parameters", {
    fee: uint64,
    price_per_kbyte: uint32
}
);

export var asset_reserve_operation_fee_parameters = new Serializer( 
    "asset_reserve_operation_fee_parameters",
    {fee: uint64}
);

export var asset_fund_fee_pool_operation_fee_parameters = new Serializer( 
    "asset_fund_fee_pool_operation_fee_parameters",
    {fee: uint64}
);

export var asset_settle_operation_fee_parameters = new Serializer( 
    "asset_settle_operation_fee_parameters",
    {fee: uint64}
);

export var asset_global_settle_operation_fee_parameters = new Serializer( 
    "asset_global_settle_operation_fee_parameters",
    {fee: uint64}
);

export var asset_publish_feed_operation_fee_parameters = new Serializer( 
    "asset_publish_feed_operation_fee_parameters",
    {fee: uint64}
);

export var witness_create_operation_fee_parameters = new Serializer( 
    "witness_create_operation_fee_parameters",
    {fee: uint64}
);

export var witness_update_operation_fee_parameters = new Serializer( 
    "witness_update_operation_fee_parameters",
    {fee: int64}
);

export var proposal_create_operation_fee_parameters = new Serializer( 
    "proposal_create_operation_fee_parameters", {
    fee: uint64,
    price_per_kbyte: uint32
}
);

export var proposal_update_operation_fee_parameters = new Serializer( 
    "proposal_update_operation_fee_parameters", {
    fee: uint64,
    price_per_kbyte: uint32
}
);

export var proposal_delete_operation_fee_parameters = new Serializer( 
    "proposal_delete_operation_fee_parameters",
    {fee: uint64}
);

export var withdraw_permission_create_operation_fee_parameters = new Serializer( 
    "withdraw_permission_create_operation_fee_parameters",
    {fee: uint64}
);

export var withdraw_permission_update_operation_fee_parameters = new Serializer( 
    "withdraw_permission_update_operation_fee_parameters",
    {fee: uint64}
);

export var withdraw_permission_claim_operation_fee_parameters = new Serializer( 
    "withdraw_permission_claim_operation_fee_parameters", {
    fee: uint64,
    price_per_kbyte: uint32
}
);

export var withdraw_permission_delete_operation_fee_parameters = new Serializer( 
    "withdraw_permission_delete_operation_fee_parameters",
    {fee: uint64}
);

export var committee_member_create_operation_fee_parameters = new Serializer( 
    "committee_member_create_operation_fee_parameters",
    {fee: uint64}
);

export var committee_member_update_operation_fee_parameters = new Serializer( 
    "committee_member_update_operation_fee_parameters",
    {fee: uint64}
);

export var committee_member_update_global_parameters_operation_fee_parameters = new Serializer( 
    "committee_member_update_global_parameters_operation_fee_parameters",
    {fee: uint64}
);

export var vesting_balance_create_operation_fee_parameters = new Serializer( 
    "vesting_balance_create_operation_fee_parameters",
    {fee: uint64}
);

export var vesting_balance_withdraw_operation_fee_parameters = new Serializer( 
    "vesting_balance_withdraw_operation_fee_parameters",
    {fee: uint64}
);

export var worker_create_operation_fee_parameters = new Serializer( 
    "worker_create_operation_fee_parameters",
    {fee: uint64}
);

export var custom_operation_fee_parameters = new Serializer( 
    "custom_operation_fee_parameters", {
    fee: uint64,
    price_per_kbyte: uint32
}
);

export var assert_operation_fee_parameters = new Serializer( 
    "assert_operation_fee_parameters",
    {fee: uint64}
);

export var balance_claim_operation_fee_parameters = new Serializer( 
    "balance_claim_operation_fee_parameters"
);

export var override_transfer_operation_fee_parameters = new Serializer( 
    "override_transfer_operation_fee_parameters", {
    fee: uint64,
    price_per_kbyte: uint32
}
);

export var transfer_to_blind_operation_fee_parameters = new Serializer( 
    "transfer_to_blind_operation_fee_parameters", {
    fee: uint64,
    price_per_output: uint32
}
);

export var blind_transfer_operation_fee_parameters = new Serializer( 
    "blind_transfer_operation_fee_parameters", {
    fee: uint64,
    price_per_output: uint32
}
);

export var transfer_from_blind_operation_fee_parameters = new Serializer( 
    "transfer_from_blind_operation_fee_parameters",
    {fee: uint64}
);

export var asset_settle_cancel_operation_fee_parameters = new Serializer( 
    "asset_settle_cancel_operation_fee_parameters"
);

export var asset_claim_fees_operation_fee_parameters = new Serializer( 
    "asset_claim_fees_operation_fee_parameters",
    {fee: uint64}
);

export var fba_distribute_operation_fee_parameters = new Serializer( 
    "fba_distribute_operation_fee_parameters"
);

export var bid_collateral_operation_fee_parameters = new Serializer( 
    "bid_collateral_operation_fee_parameters",
    {fee: uint64}
);

export var execute_bid_operation_fee_parameters = new Serializer( 
    "execute_bid_operation_fee_parameters"
);

export var asset_claim_pool_operation_fee_parameters = new Serializer( 
    "asset_claim_pool_operation_fee_parameters",
    {fee: uint64}
);

export var asset_update_issuer_operation_fee_parameters = new Serializer( 
    "asset_update_issuer_operation_fee_parameters",
    {fee: uint64}
);

export var account_status_upgrade_operation_fee_parameters = new Serializer( 
    "account_status_upgrade_operation_fee_parameters", {
    status_1_fee: uint64,
    status_2_fee: uint64,
    status_3_fee: uint64,
    status_4_fee: uint64
}
);

export var flipcoin_bet_operation_fee_parameters = new Serializer( 
    "flipcoin_bet_operation_fee_parameters",
    {fee: uint64}
);

export var flipcoin_call_operation_fee_parameters = new Serializer( 
    "flipcoin_call_operation_fee_parameters",
    {fee: int64}
);

export var flipcoin_win_operation_fee_parameters = new Serializer( 
    "flipcoin_win_operation_fee_parameters",
    {fee: int64}
);

export var flipcoin_cancel_operation_fee_parameters = new Serializer( 
    "flipcoin_cancel_operation_fee_parameters",
    {fee: int64}
);

export var flipcoin_loose_operation_fee_parameters = new Serializer( 
    "flipcoin_loose_operation_fee_parameters",
    {fee: int64}
);

export var lottery_goods_create_lot_operation_fee_parameters = new Serializer( 
    "lottery_goods_create_lot_operation_fee_parameters",
    {fee: int64}
);

export var lottery_goods_buy_ticket_operation_fee_parameters = new Serializer( 
    "lottery_goods_buy_ticket_operation_fee_parameters", {
    fee: int64,
    lottery_goods_fee_percent: uint16
}
);

export var lottery_goods_send_contacts_operation_fee_parameters = new Serializer( 
    "lottery_goods_send_contacts_operation_fee_parameters",
    {fee: int64}
);

export var lottery_goods_confirm_delivery_operation_fee_parameters = new Serializer( 
    "lottery_goods_confirm_delivery_operation_fee_parameters",
    {fee: int64}
);

export var lottery_goods_win_operation_fee_parameters = new Serializer( 
    "lottery_goods_win_operation_fee_parameters",
    {fee: int64}
);

export var lottery_goods_loose_operation_fee_parameters = new Serializer( 
    "lottery_goods_loose_operation_fee_parameters",
    {fee: int64}
);

export var send_message_operation_fee_parameters = new Serializer( 
    "send_message_operation_fee_parameters", {
    fee: uint64,
    price_per_kbyte: uint32
}
);

export var matrix_open_room_operation_fee_parameters = new Serializer( 
    "matrix_open_room_operation_fee_parameters", {
    fee: int64,
    matrix_fee_percent: uint16
}
);

export var matrix_room_closed_operation_fee_parameters = new Serializer( 
    "matrix_room_closed_operation_fee_parameters",
    {fee: int64}
);

export var matrix_cell_filled_operation_fee_parameters = new Serializer( 
    "matrix_cell_filled_operation_fee_parameters",
    {fee: int64}
);

export var create_p2p_adv_operation_fee_parameters = new Serializer( 
    "create_p2p_adv_operation_fee_parameters", {
    fee: uint64,
    price_per_kbyte: uint32
}
);

export var edit_p2p_adv_operation_fee_parameters = new Serializer( 
    "edit_p2p_adv_operation_fee_parameters", {
    fee: uint64,
    price_per_kbyte: uint32
}
);

export var clear_p2p_adv_black_list_operation_fee_parameters = new Serializer( 
    "clear_p2p_adv_black_list_operation_fee_parameters",
    {fee: int64}
);

export var remove_from_p2p_adv_black_list_operation_fee_parameters = new Serializer( 
    "remove_from_p2p_adv_black_list_operation_fee_parameters",
    {fee: int64}
);

export var create_p2p_order_operation_fee_parameters = new Serializer( 
    "create_p2p_order_operation_fee_parameters",
    {fee: uint64}
);

export var cancel_p2p_order_operation_fee_parameters = new Serializer( 
    "cancel_p2p_order_operation_fee_parameters",
    {fee: int64}
);

export var autocancel_p2p_order_operation_fee_parameters = new Serializer( 
    "autocancel_p2p_order_operation_fee_parameters",
    {fee: int64}
);

export var autorefund_p2p_order_operation_fee_parameters = new Serializer( 
    "autorefund_p2p_order_operation_fee_parameters",
    {fee: int64}
);

export var call_p2p_order_operation_fee_parameters = new Serializer( 
    "call_p2p_order_operation_fee_parameters",
    {fee: uint64}
);

export var payment_p2p_order_operation_fee_parameters = new Serializer( 
    "payment_p2p_order_operation_fee_parameters",
    {fee: int64}
);

export var release_p2p_order_operation_fee_parameters = new Serializer( 
    "release_p2p_order_operation_fee_parameters",
    {fee: int64}
);

export var open_p2p_dispute_operation_fee_parameters = new Serializer( 
    "open_p2p_dispute_operation_fee_parameters",
    {fee: int64}
);

export var reply_p2p_dispute_operation_fee_parameters = new Serializer( 
    "reply_p2p_dispute_operation_fee_parameters",
    {fee: int64}
);

export var resolve_p2p_dispute_operation_fee_parameters = new Serializer( 
    "resolve_p2p_dispute_operation_fee_parameters",
    {fee: int64}
);

export var lottery_goods_refund_operation_fee_parameters = new Serializer( 
    "lottery_goods_refund_operation_fee_parameters",
    {fee: int64}
);

export var credit_system_get_operation_fee_parameters = new Serializer( 
    "credit_system_get_operation_fee_parameters",
    {fee: uint64}
);

export var credit_total_repay_operation_fee_parameters = new Serializer( 
    "credit_total_repay_operation_fee_parameters",
    {fee: uint64}
);

export var credit_repay_operation_fee_parameters = new Serializer( 
    "credit_repay_operation_fee_parameters",
    {fee: uint64}
);

export var credit_offer_create_operation_fee_parameters = new Serializer( 
    "credit_offer_create_operation_fee_parameters",
    {fee: uint64}
);

export var credit_offer_cancel_operation_fee_parameters = new Serializer( 
    "credit_offer_cancel_operation_fee_parameters",
    {fee: uint64}
);

export var credit_offer_fill_operation_fee_parameters = new Serializer( 
    "credit_offer_fill_operation_fee_parameters",
    {fee: uint64}
);

export var pledge_offer_give_create_operation_fee_parameters = new Serializer( 
    "pledge_offer_give_create_operation_fee_parameters",
    {fee: uint64}
);

export var pledge_offer_take_create_operation_fee_parameters = new Serializer( 
    "pledge_offer_take_create_operation_fee_parameters",
    {fee: uint64}
);

export var pledge_offer_cancel_operation_fee_parameters = new Serializer( 
    "pledge_offer_cancel_operation_fee_parameters",
    {fee: uint64}
);

export var pledge_offer_fill_operation_fee_parameters = new Serializer( 
    "pledge_offer_fill_operation_fee_parameters",
    {fee: uint64}
);

export var pledge_offer_repay_operation_fee_parameters = new Serializer( 
    "pledge_offer_repay_operation_fee_parameters",
    {fee: uint64}
);

export var pledge_offer_auto_repay_operation_fee_parameters = new Serializer( 
    "pledge_offer_auto_repay_operation_fee_parameters",
    {fee: uint64}
);

export var committee_member_update_gamezone_parameters_operation_fee_parameters = new Serializer( 
    "committee_member_update_gamezone_parameters_operation_fee_parameters",
    {fee: uint64}
);

export var committee_member_update_staking_parameters_operation_fee_parameters = new Serializer( 
    "committee_member_update_staking_parameters_operation_fee_parameters",
    {fee: uint64}
);

export var poc_vote_operation_fee_parameters = new Serializer( 
    "poc_vote_operation_fee_parameters",
    {fee: uint64}
);

export var poc_stak_operation_fee_parameters = new Serializer( 
    "poc_stak_operation_fee_parameters",
    {fee: uint64}
);

export var poc_staking_referal_operation_fee_parameters = new Serializer( 
    "poc_staking_referal_operation_fee_parameters",
    {fee: uint64}
);

export var exchange_silver_operation_fee_parameters = new Serializer( 
    "exchange_silver_operation_fee_parameters",
    {fee: uint64}
);

export var buy_gcwd_operation_fee_parameters = new Serializer( 
    "buy_gcwd_operation_fee_parameters",
    {fee: uint64}
);

export var approved_transfer_create_operation_fee_parameters = new Serializer( 
    "approved_transfer_create_operation_fee_parameters",
    {fee: uint64}
);

export var approved_transfer_approve_operation_fee_parameters = new Serializer( 
    "approved_transfer_approve_operation_fee_parameters",
    {fee: uint64}
);

export var approved_transfer_cancel_operation_fee_parameters = new Serializer( 
    "approved_transfer_cancel_operation_fee_parameters",
    {fee: uint64}
);

export var approved_transfer_open_dispute_operation_fee_parameters = new Serializer( 
    "approved_transfer_open_dispute_operation_fee_parameters",
    {fee: uint64}
);

export var approved_transfer_resolve_dispute_operation_fee_parameters = new Serializer( 
    "approved_transfer_resolve_dispute_operation_fee_parameters",
    {fee: uint64}
);

export var mass_payment_operation_fee_parameters = new Serializer( 
    "mass_payment_operation_fee_parameters", {
    fee: uint64,
    price_per_transfer: uint64
}
);

export var mass_payment_pay_operation_fee_parameters = new Serializer( 
    "mass_payment_pay_operation_fee_parameters",
    {fee: uint64}
);

export var change_referrer_operation_fee_parameters = new Serializer( 
    "change_referrer_operation_fee_parameters",
    {fee: uint64}
);

export var gr_team_create_operation_fee_parameters = new Serializer( 
    "gr_team_create_operation_fee_parameters",
    {fee: uint64}
);

export var gr_team_delete_operation_fee_parameters = new Serializer( 
    "gr_team_delete_operation_fee_parameters",
    {fee: uint64}
);

export var gr_invite_send_operation_fee_parameters = new Serializer( 
    "gr_invite_send_operation_fee_parameters",
    {fee: uint64}
);

export var gr_invite_accept_operation_fee_parameters = new Serializer( 
    "gr_invite_accept_operation_fee_parameters",
    {fee: uint64}
);

export var gr_player_remove_operation_fee_parameters = new Serializer( 
    "gr_player_remove_operation_fee_parameters",
    {fee: uint64}
);

export var gr_team_leave_operation_fee_parameters = new Serializer( 
    "gr_team_leave_operation_fee_parameters",
    {fee: uint64}
);

export var gr_vote_operation_fee_parameters = new Serializer( 
    "gr_vote_operation_fee_parameters",
    {fee: uint64}
);

export var gr_assign_rank_operation_fee_parameters = new Serializer( 
    "gr_assign_rank_operation_fee_parameters",
    {fee: uint64}
);

export var gr_pay_rank_reward_operation_fee_parameters = new Serializer( 
    "gr_pay_rank_reward_operation_fee_parameters",
    {fee: uint64}
);

export var gr_pay_top_reward_operation_fee_parameters = new Serializer( 
    "gr_pay_top_reward_operation_fee_parameters",
    {fee: uint64}
);

export var gr_apostolos_operation_fee_parameters = new Serializer( 
    "gr_apostolos_operation_fee_parameters",
    {fee: uint64}
);

export var gr_range_bet_operation_fee_parameters = new Serializer( 
    "gr_range_bet_operation_fee_parameters", {
    fee: int64,
    gr_range_bet_fee_percent: uint16
}
);

export var gr_team_bet_operation_fee_parameters = new Serializer( 
    "gr_team_bet_operation_fee_parameters", {
    fee: int64,
    gr_team_bet_fee_percent: uint16
}
);

export var gr_range_bet_win_operation_fee_parameters = new Serializer( 
    "gr_range_bet_win_operation_fee_parameters",
    {fee: uint64}
);

export var gr_range_bet_loose_operation_fee_parameters = new Serializer( 
    "gr_range_bet_loose_operation_fee_parameters",
    {fee: uint64}
);

export var gr_team_bet_win_operation_fee_parameters = new Serializer( 
    "gr_team_bet_win_operation_fee_parameters",
    {fee: uint64}
);

export var gr_team_bet_loose_operation_fee_parameters = new Serializer( 
    "gr_team_bet_loose_operation_fee_parameters",
    {fee: uint64}
);

export var gr_range_bet_cancel_operation_fee_parameters = new Serializer( 
    "gr_range_bet_cancel_operation_fee_parameters",
    {fee: uint64}
);

export var gr_team_bet_cancel_operation_fee_parameters = new Serializer( 
    "gr_team_bet_cancel_operation_fee_parameters",
    {fee: uint64}
);

export var fee_parameters = static_variant([
    transfer_operation_fee_parameters,    
    limit_order_create_operation_fee_parameters,    
    limit_order_cancel_operation_fee_parameters,    
    call_order_update_operation_fee_parameters,    
    fill_order_operation_fee_parameters,    
    account_create_operation_fee_parameters,    
    account_update_operation_fee_parameters,    
    account_whitelist_operation_fee_parameters,    
    account_upgrade_operation_fee_parameters,    
    account_transfer_operation_fee_parameters,    
    asset_create_operation_fee_parameters,    
    asset_update_operation_fee_parameters,    
    asset_update_bitasset_operation_fee_parameters,    
    asset_update_feed_producers_operation_fee_parameters,    
    asset_issue_operation_fee_parameters,    
    asset_reserve_operation_fee_parameters,    
    asset_fund_fee_pool_operation_fee_parameters,    
    asset_settle_operation_fee_parameters,    
    asset_global_settle_operation_fee_parameters,    
    asset_publish_feed_operation_fee_parameters,    
    witness_create_operation_fee_parameters,    
    witness_update_operation_fee_parameters,    
    proposal_create_operation_fee_parameters,    
    proposal_update_operation_fee_parameters,    
    proposal_delete_operation_fee_parameters,    
    withdraw_permission_create_operation_fee_parameters,    
    withdraw_permission_update_operation_fee_parameters,    
    withdraw_permission_claim_operation_fee_parameters,    
    withdraw_permission_delete_operation_fee_parameters,    
    committee_member_create_operation_fee_parameters,    
    committee_member_update_operation_fee_parameters,    
    committee_member_update_global_parameters_operation_fee_parameters,    
    vesting_balance_create_operation_fee_parameters,    
    vesting_balance_withdraw_operation_fee_parameters,    
    worker_create_operation_fee_parameters,    
    custom_operation_fee_parameters,    
    assert_operation_fee_parameters,    
    balance_claim_operation_fee_parameters,    
    override_transfer_operation_fee_parameters,    
    transfer_to_blind_operation_fee_parameters,    
    blind_transfer_operation_fee_parameters,    
    transfer_from_blind_operation_fee_parameters,    
    asset_settle_cancel_operation_fee_parameters,    
    asset_claim_fees_operation_fee_parameters,    
    fba_distribute_operation_fee_parameters,    
    bid_collateral_operation_fee_parameters,    
    execute_bid_operation_fee_parameters,    
    asset_claim_pool_operation_fee_parameters,    
    asset_update_issuer_operation_fee_parameters,    
    account_status_upgrade_operation_fee_parameters,    
    flipcoin_bet_operation_fee_parameters,    
    flipcoin_call_operation_fee_parameters,    
    flipcoin_win_operation_fee_parameters,    
    flipcoin_cancel_operation_fee_parameters,    
    flipcoin_loose_operation_fee_parameters,    
    lottery_goods_create_lot_operation_fee_parameters,    
    lottery_goods_buy_ticket_operation_fee_parameters,    
    lottery_goods_send_contacts_operation_fee_parameters,    
    lottery_goods_confirm_delivery_operation_fee_parameters,    
    lottery_goods_win_operation_fee_parameters,    
    lottery_goods_loose_operation_fee_parameters,    
    send_message_operation_fee_parameters,    
    matrix_open_room_operation_fee_parameters,    
    matrix_room_closed_operation_fee_parameters,    
    matrix_cell_filled_operation_fee_parameters,    
    create_p2p_adv_operation_fee_parameters,    
    edit_p2p_adv_operation_fee_parameters,    
    clear_p2p_adv_black_list_operation_fee_parameters,    
    remove_from_p2p_adv_black_list_operation_fee_parameters,    
    create_p2p_order_operation_fee_parameters,    
    cancel_p2p_order_operation_fee_parameters,    
    autocancel_p2p_order_operation_fee_parameters,    
    autorefund_p2p_order_operation_fee_parameters,    
    call_p2p_order_operation_fee_parameters,    
    payment_p2p_order_operation_fee_parameters,    
    release_p2p_order_operation_fee_parameters,    
    open_p2p_dispute_operation_fee_parameters,    
    reply_p2p_dispute_operation_fee_parameters,    
    resolve_p2p_dispute_operation_fee_parameters,    
    lottery_goods_refund_operation_fee_parameters,    
    credit_system_get_operation_fee_parameters,    
    credit_total_repay_operation_fee_parameters,    
    credit_repay_operation_fee_parameters,    
    credit_offer_create_operation_fee_parameters,    
    credit_offer_cancel_operation_fee_parameters,    
    credit_offer_fill_operation_fee_parameters,    
    pledge_offer_give_create_operation_fee_parameters,    
    pledge_offer_take_create_operation_fee_parameters,    
    pledge_offer_cancel_operation_fee_parameters,    
    pledge_offer_fill_operation_fee_parameters,    
    pledge_offer_repay_operation_fee_parameters,    
    pledge_offer_auto_repay_operation_fee_parameters,    
    committee_member_update_gamezone_parameters_operation_fee_parameters,    
    committee_member_update_staking_parameters_operation_fee_parameters,    
    poc_vote_operation_fee_parameters,    
    poc_stak_operation_fee_parameters,    
    poc_staking_referal_operation_fee_parameters,    
    exchange_silver_operation_fee_parameters,    
    buy_gcwd_operation_fee_parameters,    
    approved_transfer_create_operation_fee_parameters,    
    approved_transfer_approve_operation_fee_parameters,    
    approved_transfer_cancel_operation_fee_parameters,    
    approved_transfer_open_dispute_operation_fee_parameters,    
    approved_transfer_resolve_dispute_operation_fee_parameters,    
    mass_payment_operation_fee_parameters,    
    mass_payment_pay_operation_fee_parameters,    
    change_referrer_operation_fee_parameters,    
    gr_team_create_operation_fee_parameters,    
    gr_team_delete_operation_fee_parameters,    
    gr_invite_send_operation_fee_parameters,    
    gr_invite_accept_operation_fee_parameters,    
    gr_player_remove_operation_fee_parameters,    
    gr_team_leave_operation_fee_parameters,    
    gr_vote_operation_fee_parameters,    
    gr_assign_rank_operation_fee_parameters,    
    gr_pay_rank_reward_operation_fee_parameters,    
    gr_pay_top_reward_operation_fee_parameters,    
    gr_apostolos_operation_fee_parameters,    
    gr_range_bet_operation_fee_parameters,    
    gr_team_bet_operation_fee_parameters,    
    gr_range_bet_win_operation_fee_parameters,    
    gr_range_bet_loose_operation_fee_parameters,    
    gr_team_bet_win_operation_fee_parameters,    
    gr_team_bet_loose_operation_fee_parameters,
    gr_range_bet_cancel_operation_fee_parameters,
    gr_team_bet_cancel_operation_fee_parameters
]);

export var fee_schedule = new Serializer( 
    "fee_schedule", {
    parameters: set(fee_parameters),
    scale: uint32
}
);

export var void_result = new Serializer( 
    "void_result"
);

export var asset = new Serializer( 
    "asset", {
    amount: int64,
    asset_id: protocol_id_type("asset")
}
);

export var operation_result = static_variant([
    void_result,    
    object_id_type,    
    asset
]);

export var processed_transaction = new Serializer( 
    "processed_transaction", {
    ref_block_num: uint16,
    ref_block_prefix: uint32,
    expiration: time_point_sec,
    operations: array(operation),
    extensions: set(future_extensions),
    signatures: array(bytes(65)),
    operation_results: array(operation_result)
}
);

export var signed_block = new Serializer( 
    "signed_block", {
    previous: bytes(20),
    timestamp: time_point_sec,
    witness: protocol_id_type("witness"),
    transaction_merkle_root: bytes(20),
    extensions: set(future_extensions),
    witness_signature: bytes(65),
    transactions: array(processed_transaction)
}
);

export var block_header = new Serializer( 
    "block_header", {
    previous: bytes(20),
    timestamp: time_point_sec,
    witness: protocol_id_type("witness"),
    transaction_merkle_root: bytes(20),
    extensions: set(future_extensions)
}
);

export var signed_block_header = new Serializer( 
    "signed_block_header", {
    previous: bytes(20),
    timestamp: time_point_sec,
    witness: protocol_id_type("witness"),
    transaction_merkle_root: bytes(20),
    extensions: set(future_extensions),
    witness_signature: bytes(65)
}
);

export var memo_data = new Serializer( 
    "memo_data", {
    from: public_key,
    to: public_key,
    nonce: uint64,
    message: bytes()
}
);

export var transfer = new Serializer( 
    "transfer", {
    fee: asset,
    from: protocol_id_type("account"),
    to: protocol_id_type("account"),
    amount: asset,
    memo: optional(memo_data),
    extensions: set(future_extensions)
}
);

export var limit_order_create = new Serializer( 
    "limit_order_create", {
    fee: asset,
    seller: protocol_id_type("account"),
    amount_to_sell: asset,
    min_to_receive: asset,
    expiration: time_point_sec,
    fill_or_kill: bool,
    extensions: set(future_extensions)
}
);

export var limit_order_cancel = new Serializer( 
    "limit_order_cancel", {
    fee: asset,
    fee_paying_account: protocol_id_type("account"),
    order: protocol_id_type("limit_order"),
    extensions: set(future_extensions)
}
);

export var call_order_update = new Serializer( 
    "call_order_update", {
    fee: asset,
    funding_account: protocol_id_type("account"),
    delta_collateral: asset,
    delta_debt: asset,
    extensions: set(future_extensions)
}
);

export var price = new Serializer( 
    "price", {
    base: asset,
    quote: asset
}
);

export var fill_order = new Serializer( 
    "fill_order", {
    fee: asset,
    order_id: object_id_type,
    account_id: protocol_id_type("account"),
    pays: asset,
    receives: asset,
    fill_price: price,
    is_maker: bool
}
);

export var authority = new Serializer( 
    "authority", {
    weight_threshold: uint32,
    account_auths: map((protocol_id_type("account")), (uint16)),
    key_auths: map((public_key), (uint16)),
    address_auths: map((address), (uint16))
}
);

export var account_options = new Serializer( 
    "account_options", {
    memo_key: public_key,
    voting_account: protocol_id_type("account"),
    num_witness: uint16,
    num_committee: uint16,
    votes: set(vote_id),
    extensions: set(future_extensions)
}
);

export var account_create = new Serializer( 
    "account_create", {
    fee: asset,
    registrar: protocol_id_type("account"),
    referrer: protocol_id_type("account"),
    referrer_percent: uint16,
    name: string,
    owner: authority,
    active: authority,
    options: account_options,
    extensions: set(future_extensions)
}
);

export var account_update = new Serializer( 
    "account_update", {
    fee: asset,
    account: protocol_id_type("account"),
    owner: optional(authority),
    active: optional(authority),
    new_options: optional(account_options),
    extensions: set(future_extensions)
}
);

export var account_whitelist = new Serializer( 
    "account_whitelist", {
    fee: asset,
    authorizing_account: protocol_id_type("account"),
    account_to_list: protocol_id_type("account"),
    new_listing: uint8,
    extensions: set(future_extensions)
}
);

export var account_upgrade = new Serializer( 
    "account_upgrade", {
    fee: asset,
    account_to_upgrade: protocol_id_type("account"),
    upgrade_to_lifetime_member: bool,
    extensions: set(future_extensions)
}
);

export var account_transfer = new Serializer( 
    "account_transfer", {
    fee: asset,
    account_id: protocol_id_type("account"),
    new_owner: protocol_id_type("account"),
    extensions: set(future_extensions)
}
);

export var asset_options = new Serializer( 
    "asset_options", {
    max_supply: int64,
    market_fee_percent: uint16,
    max_market_fee: int64,
    issuer_permissions: uint16,
    flags: uint16,
    core_exchange_rate: price,
    whitelist_authorities: set(protocol_id_type("account")),
    blacklist_authorities: set(protocol_id_type("account")),
    whitelist_markets: set(protocol_id_type("asset")),
    blacklist_markets: set(protocol_id_type("asset")),
    description: string,
    extensions: set(future_extensions)
}
);

export var bitasset_options = new Serializer( 
    "bitasset_options", {
    feed_lifetime_sec: uint32,
    minimum_feeds: uint8,
    force_settlement_delay_sec: uint32,
    force_settlement_offset_percent: uint16,
    maximum_force_settlement_volume: uint16,
    short_backing_asset: protocol_id_type("asset"),
    extensions: set(future_extensions)
}
);

export var asset_create = new Serializer( 
    "asset_create", {
    fee: asset,
    issuer: protocol_id_type("account"),
    symbol: string,
    precision: uint8,
    common_options: asset_options,
    bitasset_opts: optional(bitasset_options),
    is_prediction_market: bool,
    extensions: set(future_extensions)
}
);

export var asset_update = new Serializer( 
    "asset_update", {
    fee: asset,
    issuer: protocol_id_type("account"),
    asset_to_update: protocol_id_type("asset"),
    new_issuer: optional(protocol_id_type("account")),
    new_options: asset_options,
    extensions: set(future_extensions)
}
);

export var asset_update_bitasset = new Serializer( 
    "asset_update_bitasset", {
    fee: asset,
    issuer: protocol_id_type("account"),
    asset_to_update: protocol_id_type("asset"),
    new_options: bitasset_options,
    extensions: set(future_extensions)
}
);

export var asset_update_feed_producers = new Serializer( 
    "asset_update_feed_producers", {
    fee: asset,
    issuer: protocol_id_type("account"),
    asset_to_update: protocol_id_type("asset"),
    new_feed_producers: set(protocol_id_type("account")),
    extensions: set(future_extensions)
}
);

export var asset_issue = new Serializer( 
    "asset_issue", {
    fee: asset,
    issuer: protocol_id_type("account"),
    asset_to_issue: asset,
    issue_to_account: protocol_id_type("account"),
    memo: optional(memo_data),
    extensions: set(future_extensions)
}
);

export var asset_reserve = new Serializer( 
    "asset_reserve", {
    fee: asset,
    payer: protocol_id_type("account"),
    amount_to_reserve: asset,
    extensions: set(future_extensions)
}
);

export var asset_fund_fee_pool = new Serializer( 
    "asset_fund_fee_pool", {
    fee: asset,
    from_account: protocol_id_type("account"),
    asset_id: protocol_id_type("asset"),
    amount: int64,
    extensions: set(future_extensions)
}
);

export var asset_settle = new Serializer( 
    "asset_settle", {
    fee: asset,
    account: protocol_id_type("account"),
    amount: asset,
    extensions: set(future_extensions)
}
);

export var asset_global_settle = new Serializer( 
    "asset_global_settle", {
    fee: asset,
    issuer: protocol_id_type("account"),
    asset_to_settle: protocol_id_type("asset"),
    settle_price: price,
    extensions: set(future_extensions)
}
);

export var price_feed = new Serializer( 
    "price_feed", {
    settlement_price: price,
    maintenance_collateral_ratio: uint16,
    maximum_short_squeeze_ratio: uint16,
    core_exchange_rate: price
}
);

export var asset_publish_feed = new Serializer( 
    "asset_publish_feed", {
    fee: asset,
    publisher: protocol_id_type("account"),
    asset_id: protocol_id_type("asset"),
    feed: price_feed,
    extensions: set(future_extensions)
}
);

export var witness_create = new Serializer( 
    "witness_create", {
    fee: asset,
    witness_account: protocol_id_type("account"),
    url: string,
    block_signing_key: public_key
}
);

export var witness_update = new Serializer( 
    "witness_update", {
    fee: asset,
    witness: protocol_id_type("witness"),
    witness_account: protocol_id_type("account"),
    new_url: optional(string),
    new_signing_key: optional(public_key)
}
);

export var op_wrapper = new Serializer( 
    "op_wrapper",
    {op: operation}
);

export var proposal_create = new Serializer( 
    "proposal_create", {
    fee: asset,
    fee_paying_account: protocol_id_type("account"),
    expiration_time: time_point_sec,
    proposed_ops: array(op_wrapper),
    review_period_seconds: optional(uint32),
    extensions: set(future_extensions)
}
);

export var proposal_update = new Serializer( 
    "proposal_update", {
    fee: asset,
    fee_paying_account: protocol_id_type("account"),
    proposal: protocol_id_type("proposal"),
    active_approvals_to_add: set(protocol_id_type("account")),
    active_approvals_to_remove: set(protocol_id_type("account")),
    owner_approvals_to_add: set(protocol_id_type("account")),
    owner_approvals_to_remove: set(protocol_id_type("account")),
    key_approvals_to_add: set(public_key),
    key_approvals_to_remove: set(public_key),
    extensions: set(future_extensions)
}
);

export var proposal_delete = new Serializer( 
    "proposal_delete", {
    fee: asset,
    fee_paying_account: protocol_id_type("account"),
    using_owner_authority: bool,
    proposal: protocol_id_type("proposal"),
    extensions: set(future_extensions)
}
);

export var withdraw_permission_create = new Serializer( 
    "withdraw_permission_create", {
    fee: asset,
    withdraw_from_account: protocol_id_type("account"),
    authorized_account: protocol_id_type("account"),
    withdrawal_limit: asset,
    withdrawal_period_sec: uint32,
    periods_until_expiration: uint32,
    period_start_time: time_point_sec
}
);

export var withdraw_permission_update = new Serializer( 
    "withdraw_permission_update", {
    fee: asset,
    withdraw_from_account: protocol_id_type("account"),
    authorized_account: protocol_id_type("account"),
    permission_to_update: protocol_id_type("withdraw_permission"),
    withdrawal_limit: asset,
    withdrawal_period_sec: uint32,
    period_start_time: time_point_sec,
    periods_until_expiration: uint32
}
);

export var withdraw_permission_claim = new Serializer( 
    "withdraw_permission_claim", {
    fee: asset,
    withdraw_permission: protocol_id_type("withdraw_permission"),
    withdraw_from_account: protocol_id_type("account"),
    withdraw_to_account: protocol_id_type("account"),
    amount_to_withdraw: asset,
    memo: optional(memo_data)
}
);

export var withdraw_permission_delete = new Serializer( 
    "withdraw_permission_delete", {
    fee: asset,
    withdraw_from_account: protocol_id_type("account"),
    authorized_account: protocol_id_type("account"),
    withdrawal_permission: protocol_id_type("withdraw_permission")
}
);

export var committee_member_create = new Serializer( 
    "committee_member_create", {
    fee: asset,
    committee_member_account: protocol_id_type("account"),
    url: string
}
);

export var committee_member_update = new Serializer( 
    "committee_member_update", {
    fee: asset,
    committee_member: protocol_id_type("committee_member"),
    committee_member_account: protocol_id_type("account"),
    new_url: optional(string)
}
);

export var chain_parameters = new Serializer( 
    "chain_parameters", {
    current_fees: fee_schedule,
    block_interval: uint8,
    maintenance_interval: uint32,
    maintenance_skip_slots: uint8,
    committee_proposal_review_period: uint32,
    maximum_transaction_size: uint32,
    maximum_block_size: uint32,
    maximum_time_until_expiration: uint32,
    maximum_proposal_lifetime: uint32,
    maximum_asset_whitelist_authorities: uint8,
    maximum_asset_feed_publishers: uint8,
    maximum_witness_count: uint16,
    maximum_committee_count: uint16,
    maximum_authority_membership: uint16,
    reserve_percent_of_fee: uint16,
    network_percent_of_fee: uint16,
    lifetime_referrer_percent_of_fee: uint16,
    cashback_vesting_period_seconds: uint32,
    cashback_vesting_threshold: int64,
    count_non_member_votes: bool,
    allow_non_member_whitelists: bool,
    witness_pay_per_block: int64,
    worker_budget_per_day: int64,
    max_predicate_opcode: uint16,
    fee_liquidation_threshold: int64,
    accounts_per_fee_scale: uint16,
    account_fee_scale_bitshifts: uint8,
    max_authority_depth: uint8,
    ref_01_percent_of_fee: uint16,
    ref_02_percent_of_fee: uint16,
    ref_03_percent_of_fee: uint16,
    ref_04_percent_of_fee: uint16,
    ref_05_percent_of_fee: uint16,
    ref_06_percent_of_fee: uint16,
    ref_07_percent_of_fee: uint16,
    ref_08_percent_of_fee: uint16,
    status_levels_00: uint8,
    status_levels_01: uint8,
    status_levels_02: uint8,
    status_levels_03: uint8,
    status_levels_04: uint8,
    denominator: bool,
    status_denominator_00: uint16,
    status_denominator_01: uint16,
    status_denominator_02: uint16,
    status_denominator_03: uint16,
    status_denominator_04: uint16,
    denominator_bonus_level: uint8,
    nv_levels: uint8,
    min_nv_status: uint8,
    ref_levels: uint8,
    compression_levels: uint8,
    compression: bool,
    cashback: bool,
    alllow_non_partner_register: bool,
    min_not_compressed: uint8,
    compression_limit: int64,
    referral_statistic_seconds: uint64,
    root_account: protocol_id_type("account"),
    nv_level_threshold_01: int64,
    nv_level_threshold_02: int64,
    nv_level_threshold_03: int64,
    nv_level_threshold_04: int64,
    nv_level_threshold_05: int64,
    nv_level_threshold_06: int64,
    nv_level_threshold_07: int64,
    nv_level_threshold_08: int64,
    status_threshold_01: int64,
    status_threshold_02: int64,
    status_threshold_03: int64,
    status_threshold_04: int64,
    nv_level_reward_01: uint16,
    nv_level_reward_02: uint16,
    nv_level_reward_03: uint16,
    nv_level_reward_04: uint16,
    nv_level_reward_05: uint16,
    nv_level_reward_06: uint16,
    nv_level_reward_07: uint16,
    nv_level_reward_08: uint16,
    extensions: set(future_extensions)
}
);

export var committee_member_update_global_parameters = new Serializer( 
    "committee_member_update_global_parameters", {
    fee: asset,
    new_parameters: chain_parameters
}
);

export var linear_vesting_policy_initializer = new Serializer( 
    "linear_vesting_policy_initializer", {
    begin_timestamp: time_point_sec,
    vesting_cliff_seconds: uint32,
    vesting_duration_seconds: uint32
}
);

export var cdd_vesting_policy_initializer = new Serializer( 
    "cdd_vesting_policy_initializer", {
    start_claim: time_point_sec,
    vesting_seconds: uint32
}
);

export var vesting_policy_initializer = static_variant([
    linear_vesting_policy_initializer,    
    cdd_vesting_policy_initializer
]);

export var vesting_balance_create = new Serializer( 
    "vesting_balance_create", {
    fee: asset,
    creator: protocol_id_type("account"),
    owner: protocol_id_type("account"),
    amount: asset,
    policy: vesting_policy_initializer
}
);

export var vesting_balance_withdraw = new Serializer( 
    "vesting_balance_withdraw", {
    fee: asset,
    vesting_balance: protocol_id_type("vesting_balance"),
    owner: protocol_id_type("account"),
    amount: asset
}
);

export var refund_worker_initializer = new Serializer( 
    "refund_worker_initializer"
);

export var vesting_balance_worker_initializer = new Serializer( 
    "vesting_balance_worker_initializer",
    {pay_vesting_period_days: uint16}
);

export var burn_worker_initializer = new Serializer( 
    "burn_worker_initializer"
);

export var worker_initializer = static_variant([
    refund_worker_initializer,    
    vesting_balance_worker_initializer,    
    burn_worker_initializer
]);

export var worker_create = new Serializer( 
    "worker_create", {
    fee: asset,
    owner: protocol_id_type("account"),
    work_begin_date: time_point_sec,
    work_end_date: time_point_sec,
    daily_pay: int64,
    name: string,
    url: string,
    initializer: worker_initializer
}
);

export var custom = new Serializer( 
    "custom", {
    fee: asset,
    payer: protocol_id_type("account"),
    required_auths: set(protocol_id_type("account")),
    id: uint16,
    data: bytes()
}
);

export var account_name_eq_lit_predicate = new Serializer( 
    "account_name_eq_lit_predicate", {
    account_id: protocol_id_type("account"),
    name: string
}
);

export var asset_symbol_eq_lit_predicate = new Serializer( 
    "asset_symbol_eq_lit_predicate", {
    asset_id: protocol_id_type("asset"),
    symbol: string
}
);

export var block_id_predicate = new Serializer( 
    "block_id_predicate",
    {id: bytes(20)}
);

export var predicate = static_variant([
    account_name_eq_lit_predicate,    
    asset_symbol_eq_lit_predicate,    
    block_id_predicate
]);

export var assert = new Serializer( 
    "assert", {
    fee: asset,
    fee_paying_account: protocol_id_type("account"),
    predicates: array(predicate),
    required_auths: set(protocol_id_type("account")),
    extensions: set(future_extensions)
}
);

export var balance_claim = new Serializer( 
    "balance_claim", {
    fee: asset,
    deposit_to_account: protocol_id_type("account"),
    balance_to_claim: protocol_id_type("balance"),
    balance_owner_key: public_key,
    total_claimed: asset
}
);

export var override_transfer = new Serializer( 
    "override_transfer", {
    fee: asset,
    issuer: protocol_id_type("account"),
    from: protocol_id_type("account"),
    to: protocol_id_type("account"),
    amount: asset,
    memo: optional(memo_data),
    extensions: set(future_extensions)
}
);

export var stealth_confirmation = new Serializer( 
    "stealth_confirmation", {
    one_time_key: public_key,
    to: optional(public_key),
    encrypted_memo: bytes()
}
);

export var blind_output = new Serializer( 
    "blind_output", {
    commitment: bytes(33),
    range_proof: bytes(),
    owner: authority,
    stealth_memo: optional(stealth_confirmation)
}
);

export var transfer_to_blind = new Serializer( 
    "transfer_to_blind", {
    fee: asset,
    amount: asset,
    from: protocol_id_type("account"),
    blinding_factor: bytes(32),
    outputs: array(blind_output)
}
);

export var blind_input = new Serializer( 
    "blind_input", {
    commitment: bytes(33),
    owner: authority
}
);

export var blind_transfer = new Serializer( 
    "blind_transfer", {
    fee: asset,
    inputs: array(blind_input),
    outputs: array(blind_output)
}
);

export var transfer_from_blind = new Serializer( 
    "transfer_from_blind", {
    fee: asset,
    amount: asset,
    to: protocol_id_type("account"),
    blinding_factor: bytes(32),
    inputs: array(blind_input)
}
);

export var asset_settle_cancel = new Serializer( 
    "asset_settle_cancel", {
    fee: asset,
    settlement: protocol_id_type("force_settlement"),
    account: protocol_id_type("account"),
    amount: asset,
    extensions: set(future_extensions)
}
);

export var asset_claim_fees = new Serializer( 
    "asset_claim_fees", {
    fee: asset,
    issuer: protocol_id_type("account"),
    amount_to_claim: asset,
    extensions: set(future_extensions)
}
);

export var fba_distribute = new Serializer( 
    "fba_distribute", {
    fee: asset,
    account_id: protocol_id_type("account"),
    fba_id: protocol_id_type("fba_accumulator"),
    amount: int64
}
);

export var bid_collateral = new Serializer( 
    "bid_collateral", {
    fee: asset,
    bidder: protocol_id_type("account"),
    additional_collateral: asset,
    debt_covered: asset,
    extensions: set(future_extensions)
}
);

export var execute_bid = new Serializer( 
    "execute_bid", {
    fee: asset,
    bidder: protocol_id_type("account"),
    debt: asset,
    collateral: asset
}
);

export var asset_claim_pool = new Serializer( 
    "asset_claim_pool", {
    fee: asset,
    issuer: protocol_id_type("account"),
    asset_id: protocol_id_type("asset"),
    amount_to_claim: asset,
    extensions: set(future_extensions)
}
);

export var asset_update_issuer = new Serializer( 
    "asset_update_issuer", {
    fee: asset,
    issuer: protocol_id_type("account"),
    asset_to_update: protocol_id_type("asset"),
    new_issuer: protocol_id_type("account"),
    extensions: set(future_extensions)
}
);

export var account_status_upgrade = new Serializer( 
    "account_status_upgrade", {
    fee: asset,
    account_to_upgrade: protocol_id_type("account"),
    referral_status_type: uint8
}
);

export var flipcoin_bet = new Serializer( 
    "flipcoin_bet", {
    fee: asset,
    bettor: protocol_id_type("account"),
    bet: asset,
    nonce: uint8
}
);

export var flipcoin_call = new Serializer( 
    "flipcoin_call", {
    fee: asset,
    flipcoin: protocol_id_type("flipcoin"),
    caller: protocol_id_type("account"),
    bet: asset
}
);

export var flipcoin_win = new Serializer( 
    "flipcoin_win", {
    fee: asset,
    flipcoin: protocol_id_type("flipcoin"),
    winner: protocol_id_type("account"),
    payout: asset,
    referral_payout: asset
}
);

export var flipcoin_cancel = new Serializer( 
    "flipcoin_cancel", {
    fee: asset,
    flipcoin: protocol_id_type("flipcoin"),
    bettor: protocol_id_type("account"),
    bet: asset
}
);

export var flipcoin_loose = new Serializer( 
    "flipcoin_loose", {
    fee: asset,
    flipcoin: protocol_id_type("flipcoin"),
    looser: protocol_id_type("account"),
    bet: asset
}
);

export var lottery_goods_create_lot = new Serializer( 
    "lottery_goods_create_lot", {
    fee: asset,
    owner: protocol_id_type("account"),
    total_participants: uint32,
    ticket_price: asset,
    latency_sec: uint16,
    img_url: string,
    description: string
}
);

export var lottery_goods_buy_ticket = new Serializer( 
    "lottery_goods_buy_ticket", {
    fee: asset,
    lot_id: protocol_id_type("lottery_goods"),
    participant: protocol_id_type("account"),
    ticket_price: asset
}
);

export var lottery_goods_send_contacts = new Serializer( 
    "lottery_goods_send_contacts", {
    fee: asset,
    lot_id: protocol_id_type("lottery_goods"),
    winner: protocol_id_type("account"),
    owner: protocol_id_type("account"),
    winner_contacts: memo_data
}
);

export var lottery_goods_confirm_delivery = new Serializer( 
    "lottery_goods_confirm_delivery", {
    fee: asset,
    lot_id: protocol_id_type("lottery_goods"),
    winner: protocol_id_type("account"),
    owner: protocol_id_type("account")
}
);

export var lottery_goods_win = new Serializer( 
    "lottery_goods_win", {
    fee: asset,
    lot_id: protocol_id_type("lottery_goods"),
    winner: protocol_id_type("account")
}
);

export var lottery_goods_loose = new Serializer( 
    "lottery_goods_loose", {
    fee: asset,
    lot_id: protocol_id_type("lottery_goods"),
    looser: protocol_id_type("account")
}
);

export var send_message = new Serializer( 
    "send_message", {
    fee: asset,
    from: protocol_id_type("account"),
    to: protocol_id_type("account"),
    memo: memo_data
}
);

export var matrix_open_room = new Serializer( 
    "matrix_open_room", {
    fee: asset,
    matrix_id: protocol_id_type("matrix"),
    player: protocol_id_type("account"),
    matrix_level: uint8,
    level_price: asset
}
);

export var matrix_room_closed = new Serializer( 
    "matrix_room_closed", {
    fee: asset,
    player: protocol_id_type("account"),
    matrix_room: protocol_id_type("matrix_rooms"),
    matrix_level: uint8,
    level_reward: asset
}
);

export var matrix_cell_filled = new Serializer( 
    "matrix_cell_filled", {
    fee: asset,
    player: protocol_id_type("account"),
    matrix_room: protocol_id_type("matrix_rooms"),
    matrix_level: uint8,
    cell_player: protocol_id_type("account")
}
);

export var create_p2p_adv = new Serializer( 
    "create_p2p_adv", {
    fee: asset,
    p2p_gateway: protocol_id_type("account"),
    adv_type: bool,
    adv_description: string,
    max_cwd: int64,
    min_cwd: int64,
    price: int64,
    currency: string,
    min_p2p_complete_deals: uint32,
    min_account_status: uint8,
    timelimit_for_reply: uint32,
    timelimit_for_approve: uint32,
    geo: string
}
);

export var edit_p2p_adv = new Serializer( 
    "edit_p2p_adv", {
    fee: asset,
    p2p_adv: protocol_id_type("p2p_adv"),
    p2p_gateway: protocol_id_type("account"),
    adv_type: bool,
    adv_description: string,
    max_cwd: int64,
    min_cwd: int64,
    price: int64,
    currency: string,
    min_p2p_complete_deals: uint32,
    min_account_status: uint8,
    timelimit_for_reply: uint32,
    timelimit_for_approve: uint32,
    geo: string,
    status: uint8
}
);

export var clear_p2p_adv_black_list = new Serializer( 
    "clear_p2p_adv_black_list", {
    fee: asset,
    p2p_adv: protocol_id_type("p2p_adv"),
    p2p_gateway: protocol_id_type("account")
}
);

export var remove_from_p2p_adv_black_list = new Serializer( 
    "remove_from_p2p_adv_black_list", {
    fee: asset,
    p2p_adv: protocol_id_type("p2p_adv"),
    p2p_gateway: protocol_id_type("account"),
    blacklisted: protocol_id_type("account")
}
);

export var create_p2p_order = new Serializer( 
    "create_p2p_order", {
    fee: asset,
    p2p_adv: protocol_id_type("p2p_adv"),
    amount: asset,
    price: int64,
    p2p_gateway: protocol_id_type("account"),
    p2p_client: protocol_id_type("account"),
    payment_details: optional(memo_data)
}
);

export var cancel_p2p_order = new Serializer( 
    "cancel_p2p_order", {
    fee: asset,
    p2p_gateway: protocol_id_type("account"),
    p2p_client: protocol_id_type("account"),
    p2p_order: protocol_id_type("p2p_order"),
    blacklist: bool
}
);

export var autocancel_p2p_order = new Serializer( 
    "autocancel_p2p_order", {
    fee: asset,
    p2p_gateway: protocol_id_type("account"),
    p2p_client: protocol_id_type("account"),
    p2p_order: protocol_id_type("p2p_order")
}
);

export var autorefund_p2p_order = new Serializer( 
    "autorefund_p2p_order", {
    fee: asset,
    p2p_gateway: protocol_id_type("account"),
    p2p_client: protocol_id_type("account"),
    refund_to: protocol_id_type("account"),
    p2p_order: protocol_id_type("p2p_order"),
    amount: asset
}
);

export var call_p2p_order = new Serializer( 
    "call_p2p_order", {
    fee: asset,
    p2p_order: protocol_id_type("p2p_order"),
    p2p_gateway: protocol_id_type("account"),
    p2p_client: protocol_id_type("account"),
    amount: asset,
    price: int64,
    payment_details: memo_data
}
);

export var payment_p2p_order = new Serializer( 
    "payment_p2p_order", {
    fee: asset,
    p2p_order: protocol_id_type("p2p_order"),
    paying_account: protocol_id_type("account"),
    recieving_account: protocol_id_type("account"),
    file_hash: optional(memo_data)
}
);

export var release_p2p_order = new Serializer( 
    "release_p2p_order", {
    fee: asset,
    p2p_order: protocol_id_type("p2p_order"),
    paying_account: protocol_id_type("account"),
    recieving_account: protocol_id_type("account")
}
);

export var open_p2p_dispute = new Serializer( 
    "open_p2p_dispute", {
    fee: asset,
    p2p_order: protocol_id_type("p2p_order"),
    account: protocol_id_type("account"),
    defendant: protocol_id_type("account"),
    arbitr: protocol_id_type("account"),
    contact_details: memo_data
}
);

export var reply_p2p_dispute = new Serializer( 
    "reply_p2p_dispute", {
    fee: asset,
    p2p_order: protocol_id_type("p2p_order"),
    account: protocol_id_type("account"),
    arbitr: protocol_id_type("account"),
    contact_details: memo_data
}
);

export var resolve_p2p_dispute = new Serializer( 
    "resolve_p2p_dispute", {
    fee: asset,
    p2p_order: protocol_id_type("p2p_order"),
    arbitr: protocol_id_type("account"),
    winner: protocol_id_type("account"),
    looser: protocol_id_type("account")
}
);

export var lottery_goods_refund = new Serializer( 
    "lottery_goods_refund", {
    fee: asset,
    lot_id: protocol_id_type("lottery_goods"),
    participant: protocol_id_type("account"),
    ticket_price: asset
}
);

export var credit_system_get = new Serializer( 
    "credit_system_get", {
    fee: asset,
    debitor: protocol_id_type("account"),
    credit_amount: asset
}
);

export var credit_total_repay = new Serializer( 
    "credit_total_repay", {
    fee: asset,
    debitor: protocol_id_type("account"),
    creditor: protocol_id_type("account"),
    repay_amount: asset
}
);

export var credit_repay = new Serializer( 
    "credit_repay", {
    fee: asset,
    debitor: protocol_id_type("account"),
    creditor: protocol_id_type("account"),
    repay_amount: asset
}
);

export var credit_offer_create = new Serializer( 
    "credit_offer_create", {
    fee: asset,
    min_income: int64,
    creditor: protocol_id_type("account"),
    credit_amount: asset,
    repay_amount: asset
}
);

export var credit_offer_cancel = new Serializer( 
    "credit_offer_cancel", {
    fee: asset,
    creditor: protocol_id_type("account"),
    credit_offer: protocol_id_type("credit_offer")
}
);

export var credit_offer_fill = new Serializer( 
    "credit_offer_fill", {
    fee: asset,
    debitor: protocol_id_type("account"),
    creditor: protocol_id_type("account"),
    credit_offer: protocol_id_type("credit_offer"),
    credit_amount: asset
}
);

export var pledge_offer_give_create = new Serializer( 
    "pledge_offer_give_create", {
    fee: asset,
    creditor: protocol_id_type("account"),
    pledge_amount: asset,
    credit_amount: asset,
    repay_amount: asset,
    pledge_days: uint16
}
);

export var pledge_offer_take_create = new Serializer( 
    "pledge_offer_take_create", {
    fee: asset,
    debitor: protocol_id_type("account"),
    pledge_amount: asset,
    credit_amount: asset,
    repay_amount: asset,
    pledge_days: uint16
}
);

export var pledge_offer_cancel = new Serializer( 
    "pledge_offer_cancel", {
    fee: asset,
    creator: protocol_id_type("account"),
    pledge_offer: protocol_id_type("pledge_offer")
}
);

export var pledge_offer_fill = new Serializer( 
    "pledge_offer_fill", {
    fee: asset,
    account: protocol_id_type("account"),
    debitor: protocol_id_type("account"),
    creditor: protocol_id_type("account"),
    pledge_amount: asset,
    credit_amount: asset,
    repay_amount: asset,
    pledge_days: uint16,
    pledge_offer: protocol_id_type("pledge_offer")
}
);

export var pledge_offer_repay = new Serializer( 
    "pledge_offer_repay", {
    fee: asset,
    debitor: protocol_id_type("account"),
    creditor: protocol_id_type("account"),
    repay_amount: asset,
    pledge_amount: asset,
    pledge_offer: protocol_id_type("pledge_offer")
}
);

export var pledge_offer_auto_repay = new Serializer( 
    "pledge_offer_auto_repay", {
    fee: asset,
    debitor: protocol_id_type("account"),
    creditor: protocol_id_type("account"),
    pledge_amount: asset,
    credit_amount: asset,
    repay_amount: asset,
    pledge_offer: protocol_id_type("pledge_offer")
}
);

export var gamezone_chain_parameters = new Serializer( 
    "gamezone_chain_parameters", {
    matrix_lasts_blocks: uint32,
    matrix_idle_blocks: uint32,
    matrix_level_1_cells: uint8,
    matrix_level_2_cells: uint8,
    matrix_level_3_cells: uint8,
    matrix_level_4_cells: uint8,
    matrix_level_5_cells: uint8,
    matrix_level_6_cells: uint8,
    matrix_level_7_cells: uint8,
    matrix_level_8_cells: uint8,
    matrix_level_1_price: int64,
    matrix_level_2_price: int64,
    matrix_level_3_price: int64,
    matrix_level_4_price: int64,
    matrix_level_5_price: int64,
    matrix_level_6_price: int64,
    matrix_level_7_price: int64,
    matrix_level_8_price: int64,
    matrix_level_1_prize: int64,
    matrix_level_2_prize: int64,
    matrix_level_3_prize: int64,
    matrix_level_4_prize: int64,
    matrix_level_5_prize: int64,
    matrix_level_6_prize: int64,
    matrix_level_7_prize: int64,
    matrix_level_8_prize: int64,
    lottery_goods_total_participants: uint32,
    lottery_goods_expiration: uint32,
    flipcoin_min_bet_amount: int64
}
);

export var committee_member_update_gamezone_parameters = new Serializer( 
    "committee_member_update_gamezone_parameters", {
    fee: asset,
    new_parameters: gamezone_chain_parameters
}
);

export var staking_chain_parameters = new Serializer( 
    "staking_chain_parameters", {
    poc_ref_01: uint16,
    poc_ref_02: uint16,
    poc_ref_03: uint16,
    poc_ref_04: uint16,
    poc_ref_05: uint16,
    poc_ref_06: uint16,
    poc_ref_07: uint16,
    poc_ref_08: uint16,
    poc_status_levels_00: uint8,
    poc_status_levels_01: uint8,
    poc_status_levels_02: uint8,
    poc_status_levels_03: uint8,
    poc_status_levels_04: uint8,
    poc_status_denominator_00: uint16,
    poc_status_denominator_01: uint16,
    poc_status_denominator_02: uint16,
    poc_status_denominator_03: uint16,
    poc_status_denominator_04: uint16,
    poc_vote_duration: uint32,
    poc_vote_interval_days: uint16,
    poc_min_votes: uint16,
    poc_filter_percent: uint16,
    poc3_min_amount: int64,
    poc6_min_amount: int64,
    poc12_min_amount: int64
}
);

export var committee_member_update_staking_parameters = new Serializer( 
    "committee_member_update_staking_parameters", {
    fee: asset,
    new_parameters: staking_chain_parameters
}
);

export var poc_vote = new Serializer( 
    "poc_vote", {
    fee: asset,
    account: protocol_id_type("account"),
    poc3_vote: asset,
    poc6_vote: asset,
    poc12_vote: asset
}
);

export var poc_stak = new Serializer( 
    "poc_stak", {
    fee: asset,
    account: protocol_id_type("account"),
    stak_amount: asset,
    staking_type: uint8
}
);

export var poc_staking_referal = new Serializer( 
    "poc_staking_referal", {
    fee: asset,
    referrer: protocol_id_type("account"),
    account: protocol_id_type("account"),
    level: uint8,
    reward: asset
}
);

export var exchange_silver = new Serializer( 
    "exchange_silver", {
    fee: asset,
    account: protocol_id_type("account"),
    amount: asset
}
);

export var buy_gcwd = new Serializer( 
    "buy_gcwd", {
    fee: asset,
    account: protocol_id_type("account"),
    amount: asset
}
);

export var approved_transfer_create = new Serializer( 
    "approved_transfer_create", {
    fee: asset,
    from: protocol_id_type("account"),
    to: protocol_id_type("account"),
    arbitr: protocol_id_type("account"),
    expiration: time_point_sec,
    amount: asset
}
);

export var approved_transfer_approve = new Serializer( 
    "approved_transfer_approve", {
    fee: asset,
    from: protocol_id_type("account"),
    to: protocol_id_type("account"),
    arbitr: protocol_id_type("account"),
    amount: asset,
    ato: protocol_id_type("approved_transfer")
}
);

export var approved_transfer_cancel = new Serializer( 
    "approved_transfer_cancel", {
    fee: asset,
    from: protocol_id_type("account"),
    to: protocol_id_type("account"),
    arbitr: protocol_id_type("account"),
    amount: asset,
    ato: protocol_id_type("approved_transfer")
}
);

export var approved_transfer_open_dispute = new Serializer( 
    "approved_transfer_open_dispute", {
    fee: asset,
    from: protocol_id_type("account"),
    to: protocol_id_type("account"),
    arbitr: protocol_id_type("account"),
    amount: asset,
    ato: protocol_id_type("approved_transfer")
}
);

export var approved_transfer_resolve_dispute = new Serializer( 
    "approved_transfer_resolve_dispute", {
    fee: asset,
    from: protocol_id_type("account"),
    to: protocol_id_type("account"),
    arbitr: protocol_id_type("account"),
    amount: asset,
    winner: protocol_id_type("account"),
    ato: protocol_id_type("approved_transfer")
}
);

export var mass_payment = new Serializer( 
    "mass_payment", {
    fee: asset,
    from: protocol_id_type("account"),
    asset_id: protocol_id_type("asset"),
    payments: map((protocol_id_type("account")), (uint64))
}
);

export var mass_payment_pay = new Serializer( 
    "mass_payment_pay", {
    fee: asset,
    from: protocol_id_type("account"),
    to: protocol_id_type("account"),
    amount: asset
}
);

export var change_referrer = new Serializer( 
    "change_referrer", {
    fee: asset,
    account_id: protocol_id_type("account"),
    new_referrer: protocol_id_type("account")
}
);

export var gr_team_create = new Serializer( 
    "gr_team_create", {
    fee: asset,
    captain: protocol_id_type("account"),
    name: string,
    description: string,
    logo: string
}
);

export var gr_team_delete = new Serializer( 
    "gr_team_delete", {
    fee: asset,
    captain: protocol_id_type("account"),
    team: protocol_id_type("gr_team")
}
);

export var gr_invite_send = new Serializer( 
    "gr_invite_send", {
    fee: asset,
    captain: protocol_id_type("account"),
    player: protocol_id_type("account"),
    team: protocol_id_type("gr_team")
}
);

export var gr_invite_accept = new Serializer( 
    "gr_invite_accept", {
    fee: asset,
    captain: protocol_id_type("account"),
    player: protocol_id_type("account"),
    team: protocol_id_type("gr_team"),
    invite: protocol_id_type("gr_invite")
}
);

export var gr_player_remove = new Serializer( 
    "gr_player_remove", {
    fee: asset,
    captain: protocol_id_type("account"),
    player: protocol_id_type("account"),
    team: protocol_id_type("gr_team")
}
);

export var gr_team_leave = new Serializer( 
    "gr_team_leave", {
    fee: asset,
    captain: protocol_id_type("account"),
    player: protocol_id_type("account"),
    team: protocol_id_type("gr_team")
}
);

export var gr_vote = new Serializer( 
    "gr_vote", {
    fee: asset,
    player: protocol_id_type("account"),
    gr_iron_volume: int64,
    gr_bronze_volume: int64,
    gr_silver_volume: int64,
    gr_gold_volume: int64,
    gr_platinum_volume: int64,
    gr_diamond_volume: int64,
    gr_master_volume: int64,
    gr_iron_reward: int64,
    gr_bronze_reward: int64,
    gr_silver_reward: int64,
    gr_gold_reward: int64,
    gr_platinum_reward: int64,
    gr_diamond_reward: int64,
    gr_elite_reward: int64,
    gr_master_reward: int64
}
);

export var gr_assign_rank = new Serializer( 
    "gr_assign_rank", {
    fee: asset,
    player: protocol_id_type("account"),
    team: protocol_id_type("gr_team"),
    rank: uint8
}
);

export var gr_pay_rank_reward = new Serializer( 
    "gr_pay_rank_reward", {
    fee: asset,
    captain: protocol_id_type("account"),
    team: protocol_id_type("gr_team"),
    amount: asset,
    rank: uint8
}
);

export var gr_pay_top_reward = new Serializer( 
    "gr_pay_top_reward", {
    fee: asset,
    captain: protocol_id_type("account"),
    team: protocol_id_type("gr_team"),
    amount: asset,
    interval: uint8
}
);

export var gr_apostolos = new Serializer( 
    "gr_apostolos", {
    fee: asset,
    player: protocol_id_type("account"),
    team: protocol_id_type("gr_team")
}
);

export var gr_range_bet = new Serializer( 
    "gr_range_bet", {
    fee: asset,
    team: protocol_id_type("gr_team"),
    lower_rank: uint8,
    upper_rank: uint8,
    result: bool,
    bettor: protocol_id_type("account"),
    bet: asset
}
);

export var gr_team_bet = new Serializer( 
    "gr_team_bet", {
    fee: asset,
    team1: protocol_id_type("gr_team"),
    team2: protocol_id_type("gr_team"),
    winner: protocol_id_type("gr_team"),
    bettor: protocol_id_type("account"),
    bet: asset
}
);

export var gr_range_bet_win = new Serializer( 
    "gr_range_bet_win", {
    fee: asset,
    gr_range_bet: protocol_id_type("gr_range_bet"),
    result: uint64,
    team: protocol_id_type("gr_team"),
    lower_rank: uint8,
    upper_rank: uint8,
    total_bets: asset,
    total_wins: asset,
    bettor_part: asset,
    reward: asset,
    bettor: protocol_id_type("account")
}
);

export var gr_range_bet_loose = new Serializer( 
    "gr_range_bet_loose", {
    fee: asset,
    gr_range_bet: protocol_id_type("gr_range_bet"),
    result: uint64,
    team: protocol_id_type("gr_team"),
    lower_rank: uint8,
    upper_rank: uint8,
    bettor: protocol_id_type("account")
}
);

export var gr_team_bet_win = new Serializer( 
    "gr_team_bet_win", {
    fee: asset,
    gr_team_bet: protocol_id_type("gr_team_bet"),
    team1: protocol_id_type("gr_team"),
    team2: protocol_id_type("gr_team"),
    winner: protocol_id_type("gr_team"),
    total_bets: asset,
    total_wins: asset,
    bettor_part: asset,
    reward: asset,
    bettor: protocol_id_type("account")
}
);

export var gr_team_bet_loose = new Serializer( 
    "gr_team_bet_loose", {
    fee: asset,
    gr_team_bet: protocol_id_type("gr_team_bet"),
    team1: protocol_id_type("gr_team"),
    team2: protocol_id_type("gr_team"),
    winner: protocol_id_type("gr_team"),
    bettor: protocol_id_type("account")
}
);

export var gr_range_bet_cancel = new Serializer( 
    "gr_range_bet_cancel", {
    fee: asset,
    gr_range_bet: protocol_id_type("gr_range_bet"),
    result: uint64,
    team: protocol_id_type("gr_team"),
    lower_rank: uint8,
    upper_rank: uint8,
    payback: asset,
    bettor: protocol_id_type("account")
}
);

export var gr_team_bet_cancel = new Serializer( 
    "gr_team_bet_cancel", {
    fee: asset,
    gr_team_bet: protocol_id_type("gr_team_bet"),
    team1: protocol_id_type("gr_team"),
    team2: protocol_id_type("gr_team"),
    winner: protocol_id_type("gr_team"),
    payback: asset,
    bettor: protocol_id_type("account")
}
);


operation.st_operations = [
    transfer,    
    limit_order_create,    
    limit_order_cancel,    
    call_order_update,    
    fill_order,    
    account_create,    
    account_update,    
    account_whitelist,    
    account_upgrade,    
    account_transfer,    
    asset_create,    
    asset_update,    
    asset_update_bitasset,    
    asset_update_feed_producers,    
    asset_issue,    
    asset_reserve,    
    asset_fund_fee_pool,    
    asset_settle,    
    asset_global_settle,    
    asset_publish_feed,    
    witness_create,    
    witness_update,    
    proposal_create,    
    proposal_update,    
    proposal_delete,    
    withdraw_permission_create,    
    withdraw_permission_update,    
    withdraw_permission_claim,    
    withdraw_permission_delete,    
    committee_member_create,    
    committee_member_update,    
    committee_member_update_global_parameters,    
    vesting_balance_create,    
    vesting_balance_withdraw,    
    worker_create,    
    custom,    
    assert,    
    balance_claim,    
    override_transfer,    
    transfer_to_blind,    
    blind_transfer,    
    transfer_from_blind,    
    asset_settle_cancel,    
    asset_claim_fees,    
    fba_distribute,    
    bid_collateral,    
    execute_bid,    
    asset_claim_pool,    
    asset_update_issuer,    
    account_status_upgrade,    
    flipcoin_bet,    
    flipcoin_call,    
    flipcoin_win,    
    flipcoin_cancel,    
    flipcoin_loose,    
    lottery_goods_create_lot,    
    lottery_goods_buy_ticket,    
    lottery_goods_send_contacts,    
    lottery_goods_confirm_delivery,    
    lottery_goods_win,    
    lottery_goods_loose,    
    send_message,    
    matrix_open_room,    
    matrix_room_closed,    
    matrix_cell_filled,    
    create_p2p_adv,    
    edit_p2p_adv,    
    clear_p2p_adv_black_list,    
    remove_from_p2p_adv_black_list,    
    create_p2p_order,    
    cancel_p2p_order,    
    autocancel_p2p_order,    
    autorefund_p2p_order,    
    call_p2p_order,    
    payment_p2p_order,    
    release_p2p_order,    
    open_p2p_dispute,    
    reply_p2p_dispute,    
    resolve_p2p_dispute,    
    lottery_goods_refund,    
    credit_system_get,    
    credit_total_repay,    
    credit_repay,    
    credit_offer_create,    
    credit_offer_cancel,    
    credit_offer_fill,    
    pledge_offer_give_create,    
    pledge_offer_take_create,    
    pledge_offer_cancel,    
    pledge_offer_fill,    
    pledge_offer_repay,    
    pledge_offer_auto_repay,    
    committee_member_update_gamezone_parameters,    
    committee_member_update_staking_parameters,    
    poc_vote,    
    poc_stak,    
    poc_staking_referal,    
    exchange_silver,    
    buy_gcwd,    
    approved_transfer_create,    
    approved_transfer_approve,    
    approved_transfer_cancel,    
    approved_transfer_open_dispute,    
    approved_transfer_resolve_dispute,    
    mass_payment,    
    mass_payment_pay,    
    change_referrer,    
    gr_team_create,    
    gr_team_delete,    
    gr_invite_send,    
    gr_invite_accept,    
    gr_player_remove,    
    gr_team_leave,    
    gr_vote,    
    gr_assign_rank,    
    gr_pay_rank_reward,    
    gr_pay_top_reward,    
    gr_apostolos,    
    gr_range_bet,    
    gr_team_bet,    
    gr_range_bet_win,    
    gr_range_bet_loose,    
    gr_team_bet_win,    
    gr_team_bet_loose,
    gr_range_bet_cancel,
    gr_team_bet_cancel
];

export var transaction = new Serializer( 
    "transaction", {
    ref_block_num: uint16,
    ref_block_prefix: uint32,
    expiration: time_point_sec,
    operations: array(operation),
    extensions: set(future_extensions)
}
);

export var signed_transaction = new Serializer( 
    "signed_transaction", {
    ref_block_num: uint16,
    ref_block_prefix: uint32,
    expiration: time_point_sec,
    operations: array(operation),
    extensions: set(future_extensions),
    signatures: array(bytes(65))
}
);

//# -------------------------------
//#  Generated code end
//# -------------------------------

// Custom Types

export var stealth_memo_data = new Serializer("stealth_memo_data", {
    from: optional(public_key),
    amount: asset,
    blinding_factor: bytes(32),
    commitment: bytes(33),
    check: uint32
});
// var stealth_confirmation = new Serializer(
//     "stealth_confirmation", {
//     one_time_key: public_key,
//     to: optional( public_key ),
//     encrypted_memo: stealth_memo_data
// })
